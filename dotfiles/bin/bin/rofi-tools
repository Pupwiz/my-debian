#!/bin/bash

# This script intended to be used with rofi.
# It lists:
# - bash aliases;
# - functions, declared within this script;
# - utilities in `bin/bash`.
# It executes selected option with parameters,
# returned by rofi.
#
# Functions may return list of options themselves,
# allowing simple second-level menu.
#
# Note how `godoc` function without arguments returns
# a list of the options, prefixed with `godoc` again,
# so it can be invoked again to handle arguments.

function man() {
    if [ -z "$1" ]; then
        cat <<- EOF
		..
		man
		man find
		man systemctl
		man stow
		man mr
		man git
		man rofi
		Usage: man [OPTION...] [SECTION] PAGE...
		EOF
    else
        _term "man $@"
    fi
}

function godoc() {
    if [ -z "$1" ]; then
        echo ".."
        local path=$(readlink -f "$(go env GOROOT)/src")
        find "$path" \
            -mindepth 1 \
            -type d \
            \( -name vendor -o -name internal -o -name "test*" \) \
            -prune -o \
            -type f -name "*.go" \
            -printf "%P\n" \
            | xargs -n 1 dirname \
            | sort -u \
            | xargs -n 1 echo godoc
    else
        _term "go tool doc $1"
    fi
}

function gopass() {
    if [ -z "$1" ]; then
        echo ".."
        command gopass ls -f | xargs -n 1 echo gopass
    else
        x-terminal-emulator \
            -T "gopass show $1" \
            -e /bin/bash -c "source $HOME/.bash_custom && { gopass show $@ | tail -n +2; } && echo && gopass show -c $@ && sleep 50" &
    fi
}

function gopass-open() {
    if [ -z "$1" ]; then
        echo ".."
        command gopass ls -f | xargs -n 1 echo gopass-open
    else
        x-terminal-emulator \
            -T "gopass-open $1" \
            -e /bin/bash -c "source $HOME/.bash_custom && { gopass show $@ | tail -n +2; } && echo && gopass show -c $@ && { gopass show $@ url | xargs -I$ x-www-browser $ 2>&1 >/dev/null ; } && sleep 50" &
    fi
}

function power() {
    if [ -z "$1" ]; then
        echo ".."
        command power | xargs -n 1 echo power
    else
        command power "$@"
    fi
}

# Lists declared aliases from `~/.bash_aliases`.
function aliases() {
    echo ".."
    (/bin/bash -O expand_aliases -c "source ~/.bash_aliases; alias -p") \
        | cut -d'=' -f1 | cut -d' ' -f2 | sort
}

# Lists files in `~/bin`.
function bin() {
    echo ".."
    find -L ~/bin -mindepth 1 -maxdepth 1 -type f -printf "%f\n" | sort
}

# Lists all functions declared within this script,
# except those prefixed with underscore.
function _funcs() {
    declare -F | cut -d' ' -f3 | grep -e '^[^_]' | sort
}

# Executes command in terminal.
function _term() {
    x-terminal-emulator -hold -T "$1" -e /bin/bash -O expand_aliases -i -c "$@" &
}

# First arg of this script contains all args for tool.
args=$(for s in $1; do echo "$s"; done)

# If first arg contains the name of a function, alias or file from `~/bin` -
# execute it and exit.  Don't execute unknown staff. String `..` is special -
# it renders top level menu.
if [ -n "${args[0]}" ] && [ "$1" != ".." ]; then
    if [ $(_funcs | grep -c -e "${args[0]}") -gt 0 ]; then
        eval $1
    elif [ $((aliases; bin) | grep -c -e "${args[0]}") -gt 0 ]; then
        _term "$1"
    fi
    exit 0
fi

_funcs
